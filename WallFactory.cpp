#include "WallFactory.hpp"
#include "Wall.hpp"

WallFactory::WallFactory()
{
	/* texture is tiled so that any length wall can be drawn */
	texture.setRepeated(true);
}

WallFactory::~WallFactory()
{
	/* delete all objects before factory is deleted */
	reset();
}

void WallFactory::loadTexture(const sf::Image & spritesheet)
{
	texture.loadFromImage(spritesheet,sf::IntRect(0,0,120,40));
}

Wall * WallFactory::generate(sf::Vector2f & pos, int length, bool horizontal = true)
{
	Wall * w = new Wall(pos,texture,length,horizontal);
	active.addItem(w);
	return w;
}

/* delete all objects in list */
void WallFactory::reset()
{
	List<Wall>::Iterator iter = active.getIterator();
	while (iter.hasNext())
	{
		delete iter.next();
		iter.removeLastItem();
	}
}

/* draw all walls generated by factory */
void WallFactory::draw(sf::RenderWindow & window)
{
	List<Wall>::Iterator iter = active.getIterator();

	while (iter.hasNext())
		iter.next() -> draw(window);
}
